From db6a21bb1e5ce3031b9481aeb748310ea29ded15 Mon Sep 17 00:00:00 2001
From: steadfasterX <steadfasterX@gmail.com>
Date: Sat, 19 Feb 2022 21:23:01 +0000
Subject: [PATCH 1/1] micro-g: add enhanced signature spoofing

Change-Id: Icbc51c2e535da50b7bc757578d672ec203c05b5a
---
 core/java/android/app/Activity.java           | 21 +++++++++++++++
 core/java/android/provider/Settings.java      |  9 +++++++
 core/res/AndroidManifest.xml                  |  7 +++++
 core/res/res/values/config.xml                |  2 ++
 core/res/res/values/strings.xml               |  5 ++++
 .../server/pm/PackageManagerService.java      | 27 +++++++++++++++++--
 6 files changed, 69 insertions(+), 2 deletions(-)

diff --git a/core/java/android/app/Activity.java b/core/java/android/app/Activity.java
index 85a969b8003..b4d9e36a60e 100644
--- a/core/java/android/app/Activity.java
+++ b/core/java/android/app/Activity.java
@@ -72,6 +72,7 @@ import android.os.ServiceManager.ServiceNotFoundException;
 import android.os.StrictMode;
 import android.os.SystemProperties;
 import android.os.UserHandle;
+import android.provider.Settings.Secure;
 import android.text.Selection;
 import android.text.SpannableStringBuilder;
 import android.text.TextUtils;
@@ -4478,6 +4479,26 @@ public class Activity extends ContextThemeWrapper
             onRequestPermissionsResult(requestCode, new String[0], new int[0]);
             return;
         }
+
+	/*
+	Only when the requested permission asks for signature spoofing, check if that is allowed
+	in developer options and skip the dialog if not
+	*/
+	List<String> permlist = Arrays.asList(permissions);
+	if (permlist.contains("android.permission.FAKE_PACKAGE_SIGNATURE")) {
+	    if (android.provider.Settings.Secure.getInt(getContentResolver(),
+		   android.provider.Settings.Secure.ALLOW_SIGNATURE_FAKE, 0) == 0) {
+		Log.w(TAG, "Requested signature spoofing permission ("
+			+ Arrays.toString(permissions)
+			+ ") has been denied as it is not enabled in developer options");
+		return;
+	    } else {
+		Log.w(TAG, "The app's permission request for: "
+			+ Arrays.toString(permissions)
+			+ " will be processed as signature spoofing is enabled in developer options!");
+	    }
+	}
+
         Intent intent = getPackageManager().buildRequestPermissionsIntent(permissions);
         startActivityForResult(REQUEST_PERMISSIONS_WHO_PREFIX, intent, requestCode, null);
         mHasCurrentPermissionsRequest = true;
diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 0c73965d13c..7e52b1ba40b 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -5673,6 +5673,15 @@ public final class Settings {
          */
         public static final String INSTALL_NON_MARKET_APPS = "install_non_market_apps";
 
+        /**
+         * Whether applications can fake a signature.
+         *
+         * <p>1 = permit apps to fake signature
+         * <p>0 = disable this feature
+         * @hide
+         */
+        public static final String ALLOW_SIGNATURE_FAKE = "allow_signature_fake";
+
         /**
          * A flag to tell {@link com.android.server.devicepolicy.DevicePolicyManagerService} that
          * the default for {@link #INSTALL_NON_MARKET_APPS} is reversed for this user on OTA. So it
diff --git a/core/res/AndroidManifest.xml b/core/res/AndroidManifest.xml
index af1a6fa9e3c..c9e9daea1ba 100644
--- a/core/res/AndroidManifest.xml
+++ b/core/res/AndroidManifest.xml
@@ -2357,6 +2357,13 @@
         android:description="@string/permdesc_getPackageSize"
         android:protectionLevel="normal" />
 
+    <!-- @hide Allows an application to change the package signature as
+	 seen by applications -->
+    <permission android:name="android.permission.FAKE_PACKAGE_SIGNATURE"
+        android:protectionLevel="dangerous"
+        android:label="@string/permlab_fakePackageSignature"
+        android:description="@string/permdesc_fakePackageSignature" />
+
     <!-- @deprecated No longer useful, see
          {@link android.content.pm.PackageManager#addPackageToPreferred}
          for details. -->
diff --git a/core/res/res/values/config.xml b/core/res/res/values/config.xml
index bd84a6d720b..977ae5cfe10 100644
--- a/core/res/res/values/config.xml
+++ b/core/res/res/values/config.xml
@@ -1716,6 +1716,8 @@
     <string-array name="config_locationProviderPackageNames" translatable="false">
         <!-- The standard AOSP fused location provider -->
         <item>com.android.location.fused</item>
+        <!-- The (faked) microg fused location provider (a free reimplementation) -->
+        <item>com.google.android.gms</item>
     </string-array>
 
     <!-- This string array can be overriden to enable test location providers initially. -->
diff --git a/core/res/res/values/strings.xml b/core/res/res/values/strings.xml
index 29af7d71914..2094dd1d99a 100644
--- a/core/res/res/values/strings.xml
+++ b/core/res/res/values/strings.xml
@@ -785,6 +785,11 @@
 
     <!--  Permissions -->
 
+    <!-- Title for the spoof signature permission -->
+    <string name="permlab_fakePackageSignature">Spoof package signature</string>
+    <!-- Description of the spoof signature permission -->
+    <string name="permdesc_fakePackageSignature">pretend to be ANY app. This permission is highly dangerous! For example, the app can claim to be the Play Store and install malicious apps completely unnoticed, or accessing your private data, contacts, ... . So allow this only with EXTREMELY caution and still keep in mind how dangerous this authorization is (reset permissions in Apps - Advanced - App Permissions - Spoof Package Signature)</string>
+
     <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
     <string name="permlab_statusBar">disable or modify status bar</string>
     <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
diff --git a/services/core/java/com/android/server/pm/PackageManagerService.java b/services/core/java/com/android/server/pm/PackageManagerService.java
index dc44fe17722..6767f0f5be1 100644
--- a/services/core/java/com/android/server/pm/PackageManagerService.java
+++ b/services/core/java/com/android/server/pm/PackageManagerService.java
@@ -4063,8 +4063,9 @@ public class PackageManagerService extends IPackageManager.Stub
                 });
             }
 
-            PackageInfo packageInfo = PackageParser.generatePackageInfo(p, gids, flags,
-                    ps.firstInstallTime, ps.lastUpdateTime, permissions, state, userId);
+            PackageInfo packageInfo = mayFakeSignature(p, PackageParser.generatePackageInfo(p, gids, flags,
+                ps.firstInstallTime, ps.lastUpdateTime, permissions, state, userId),
+                permissions);
 
             if (packageInfo == null) {
                 return null;
@@ -4100,6 +4101,28 @@ public class PackageManagerService extends IPackageManager.Stub
         }
     }
 
+    private PackageInfo mayFakeSignature(PackageParser.Package p, PackageInfo pi,
+            Set<String> permissions) {
+        try {
+            if (permissions.contains("android.permission.FAKE_PACKAGE_SIGNATURE")
+                    && p.applicationInfo.targetSdkVersion > Build.VERSION_CODES.LOLLIPOP_MR1
+                    && p.mAppMetaData != null) {
+                // stop here when not enabled in developer settings
+                if (android.provider.Settings.Secure.getInt(mContext.getContentResolver(),
+                    android.provider.Settings.Secure.ALLOW_SIGNATURE_FAKE, 0) == 0)
+                    return pi;
+                String sig = p.mAppMetaData.getString("fake-signature");
+                if (sig != null) {
+                    pi.signatures = new Signature[] {new Signature(sig)};
+                }
+            }
+        } catch (Throwable t) {
+            // We should never die because of any failures, this is system code!
+            Log.w("PackageManagerService.FAKE_PACKAGE_SIGNATURE", t);
+	}
+        return pi;
+    }
+
     @Override
     public void checkPackageStartable(String packageName, int userId) {
         final int callingUid = Binder.getCallingUid();
-- 
2.25.1

